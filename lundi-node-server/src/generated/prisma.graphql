# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Project implements Node {
  id: ID!
  name: String!
  description: String
  owner(where: UserWhereInput): User
  todos(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Todo!]
}

type Todo implements Node {
  id: ID!
  name: String!
  status: String
  priority: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deadline: DateTime
  owner(where: UserWhereInput): User
  project(where: ProjectWhereInput): Project
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  todos(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Todo!]
}


#
# Other Types
#

type AggregateProject {
  count: Int!
}

type AggregateTodo {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createTodo(data: TodoCreateInput!): Todo!
  createProject(data: ProjectCreateInput!): Project!
  createUser(data: UserCreateInput!): User!
  updateTodo(data: TodoUpdateInput!, where: TodoWhereUniqueInput!): Todo
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteTodo(where: TodoWhereUniqueInput!): Todo
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteUser(where: UserWhereUniqueInput!): User
  upsertTodo(where: TodoWhereUniqueInput!, create: TodoCreateInput!, update: TodoUpdateInput!): Todo!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyTodoes(data: TodoUpdateInput!, where: TodoWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyTodoes(where: TodoWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type ProjectConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  description: String
  owner: UserCreateOneWithoutProjectsInput
  todos: TodoCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutOwnerInput {
  create: [ProjectCreateWithoutOwnerInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutTodosInput {
  create: ProjectCreateWithoutTodosInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutOwnerInput {
  name: String!
  description: String
  todos: TodoCreateManyWithoutProjectInput
}

input ProjectCreateWithoutTodosInput {
  name: String!
  description: String
  owner: UserCreateOneWithoutProjectsInput
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  The item at the end of the edge.
  """
  node: Project!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  description: String
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProjectSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProjectSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProjectSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  description: String
  owner: UserUpdateOneWithoutProjectsInput
  todos: TodoUpdateManyWithoutProjectInput
}

input ProjectUpdateManyWithoutOwnerInput {
  create: [ProjectCreateWithoutOwnerInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ProjectUpdateOneWithoutTodosInput {
  create: ProjectCreateWithoutTodosInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateWithoutTodosDataInput
  upsert: ProjectUpsertWithoutTodosInput
}

input ProjectUpdateWithoutOwnerDataInput {
  name: String
  description: String
  todos: TodoUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutTodosDataInput {
  name: String
  description: String
  owner: UserUpdateOneWithoutProjectsInput
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutOwnerDataInput!
}

input ProjectUpsertWithoutTodosInput {
  update: ProjectUpdateWithoutTodosDataInput!
  create: ProjectCreateWithoutTodosInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutOwnerDataInput!
  create: ProjectCreateWithoutOwnerInput!
}

input ProjectWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProjectWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProjectWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProjectWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  owner: UserWhereInput
  todos_every: TodoWhereInput
  todos_some: TodoWhereInput
  todos_none: TodoWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  todoes(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Todo]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  todo(where: TodoWhereUniqueInput!): Todo
  project(where: ProjectWhereUniqueInput!): Project
  user(where: UserWhereUniqueInput!): User
  todoesConnection(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodoConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  todo(where: TodoSubscriptionWhereInput): TodoSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type TodoConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TodoEdge]!
  aggregate: AggregateTodo!
}

input TodoCreateInput {
  name: String!
  status: String
  priority: String
  deadline: DateTime
  owner: UserCreateOneWithoutTodosInput
  project: ProjectCreateOneWithoutTodosInput
}

input TodoCreateManyWithoutOwnerInput {
  create: [TodoCreateWithoutOwnerInput!]
  connect: [TodoWhereUniqueInput!]
}

input TodoCreateManyWithoutProjectInput {
  create: [TodoCreateWithoutProjectInput!]
  connect: [TodoWhereUniqueInput!]
}

input TodoCreateWithoutOwnerInput {
  name: String!
  status: String
  priority: String
  deadline: DateTime
  project: ProjectCreateOneWithoutTodosInput
}

input TodoCreateWithoutProjectInput {
  name: String!
  status: String
  priority: String
  deadline: DateTime
  owner: UserCreateOneWithoutTodosInput
}

"""
An edge in a connection.
"""
type TodoEdge {
  """
  The item at the end of the edge.
  """
  node: Todo!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TodoOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
  priority_ASC
  priority_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deadline_ASC
  deadline_DESC
}

type TodoPreviousValues {
  id: ID!
  name: String!
  status: String
  priority: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deadline: DateTime
}

type TodoSubscriptionPayload {
  mutation: MutationType!
  node: Todo
  updatedFields: [String!]
  previousValues: TodoPreviousValues
}

input TodoSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TodoSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TodoSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TodoSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TodoWhereInput
}

input TodoUpdateInput {
  name: String
  status: String
  priority: String
  deadline: DateTime
  owner: UserUpdateOneWithoutTodosInput
  project: ProjectUpdateOneWithoutTodosInput
}

input TodoUpdateManyWithoutOwnerInput {
  create: [TodoCreateWithoutOwnerInput!]
  connect: [TodoWhereUniqueInput!]
  disconnect: [TodoWhereUniqueInput!]
  delete: [TodoWhereUniqueInput!]
  update: [TodoUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [TodoUpsertWithWhereUniqueWithoutOwnerInput!]
}

input TodoUpdateManyWithoutProjectInput {
  create: [TodoCreateWithoutProjectInput!]
  connect: [TodoWhereUniqueInput!]
  disconnect: [TodoWhereUniqueInput!]
  delete: [TodoWhereUniqueInput!]
  update: [TodoUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [TodoUpsertWithWhereUniqueWithoutProjectInput!]
}

input TodoUpdateWithoutOwnerDataInput {
  name: String
  status: String
  priority: String
  deadline: DateTime
  project: ProjectUpdateOneWithoutTodosInput
}

input TodoUpdateWithoutProjectDataInput {
  name: String
  status: String
  priority: String
  deadline: DateTime
  owner: UserUpdateOneWithoutTodosInput
}

input TodoUpdateWithWhereUniqueWithoutOwnerInput {
  where: TodoWhereUniqueInput!
  data: TodoUpdateWithoutOwnerDataInput!
}

input TodoUpdateWithWhereUniqueWithoutProjectInput {
  where: TodoWhereUniqueInput!
  data: TodoUpdateWithoutProjectDataInput!
}

input TodoUpsertWithWhereUniqueWithoutOwnerInput {
  where: TodoWhereUniqueInput!
  update: TodoUpdateWithoutOwnerDataInput!
  create: TodoCreateWithoutOwnerInput!
}

input TodoUpsertWithWhereUniqueWithoutProjectInput {
  where: TodoWhereUniqueInput!
  update: TodoUpdateWithoutProjectDataInput!
  create: TodoCreateWithoutProjectInput!
}

input TodoWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TodoWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TodoWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TodoWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  status: String
  """
  All values that are not equal to given value.
  """
  status_not: String
  """
  All values that are contained in given list.
  """
  status_in: [String!]
  """
  All values that are not contained in given list.
  """
  status_not_in: [String!]
  """
  All values less than the given value.
  """
  status_lt: String
  """
  All values less than or equal the given value.
  """
  status_lte: String
  """
  All values greater than the given value.
  """
  status_gt: String
  """
  All values greater than or equal the given value.
  """
  status_gte: String
  """
  All values containing the given string.
  """
  status_contains: String
  """
  All values not containing the given string.
  """
  status_not_contains: String
  """
  All values starting with the given string.
  """
  status_starts_with: String
  """
  All values not starting with the given string.
  """
  status_not_starts_with: String
  """
  All values ending with the given string.
  """
  status_ends_with: String
  """
  All values not ending with the given string.
  """
  status_not_ends_with: String
  priority: String
  """
  All values that are not equal to given value.
  """
  priority_not: String
  """
  All values that are contained in given list.
  """
  priority_in: [String!]
  """
  All values that are not contained in given list.
  """
  priority_not_in: [String!]
  """
  All values less than the given value.
  """
  priority_lt: String
  """
  All values less than or equal the given value.
  """
  priority_lte: String
  """
  All values greater than the given value.
  """
  priority_gt: String
  """
  All values greater than or equal the given value.
  """
  priority_gte: String
  """
  All values containing the given string.
  """
  priority_contains: String
  """
  All values not containing the given string.
  """
  priority_not_contains: String
  """
  All values starting with the given string.
  """
  priority_starts_with: String
  """
  All values not starting with the given string.
  """
  priority_not_starts_with: String
  """
  All values ending with the given string.
  """
  priority_ends_with: String
  """
  All values not ending with the given string.
  """
  priority_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  deadline: DateTime
  """
  All values that are not equal to given value.
  """
  deadline_not: DateTime
  """
  All values that are contained in given list.
  """
  deadline_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  deadline_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  deadline_lt: DateTime
  """
  All values less than or equal the given value.
  """
  deadline_lte: DateTime
  """
  All values greater than the given value.
  """
  deadline_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  deadline_gte: DateTime
  owner: UserWhereInput
  project: ProjectWhereInput
}

input TodoWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  projects: ProjectCreateManyWithoutOwnerInput
  todos: TodoCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTodosInput {
  create: UserCreateWithoutTodosInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProjectsInput {
  name: String!
  email: String!
  password: String!
  todos: TodoCreateManyWithoutOwnerInput
}

input UserCreateWithoutTodosInput {
  name: String!
  email: String!
  password: String!
  projects: ProjectCreateManyWithoutOwnerInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutOwnerInput
  todos: TodoUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateOneWithoutTodosInput {
  create: UserCreateWithoutTodosInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutTodosDataInput
  upsert: UserUpsertWithoutTodosInput
}

input UserUpdateWithoutProjectsDataInput {
  name: String
  email: String
  password: String
  todos: TodoUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutTodosDataInput {
  name: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutOwnerInput
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserUpsertWithoutTodosInput {
  update: UserUpdateWithoutTodosDataInput!
  create: UserCreateWithoutTodosInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  todos_every: TodoWhereInput
  todos_some: TodoWhereInput
  todos_none: TodoWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
